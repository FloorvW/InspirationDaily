{"remainingRequest":"/Users/floorvanwieringen/virtual-museum/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/floorvanwieringen/virtual-museum/node_modules/vue-stack-grid/src/Stack.vue?vue&type=style&index=0&id=63aaabc7&scoped=true&lang=css&","dependencies":[{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/vue-stack-grid/src/Stack.vue","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudnNnLWNvbnRhaW5lciB7CiAgZGlzcGxheTogYmxvY2s7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHdpZHRoOiAxMDAlOwp9Cg=="},{"version":3,"sources":["Stack.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA;AACA;AACA","file":"Stack.vue","sourceRoot":"node_modules/vue-stack-grid/src","sourcesContent":["<template>\r\n  <div class=\"vsg-container\" ref=\"container\" v-images-loaded:on.progress=\"imagesLoaded\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import imagesLoaded from 'vue-images-loaded'\r\n\r\n  export default {\r\n    props: {\r\n      columnMinWidth: {\r\n        type: Number,\r\n        required: true\r\n      },\r\n      gutterWidth: {\r\n        type: Number,\r\n        default: 0\r\n      },\r\n      gutterHeight: {\r\n        type: Number,\r\n        default: 0\r\n      },\r\n      monitorImagesLoaded: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        containerWidth: 0,\r\n        columnCount: 0,\r\n        columnWidth: 0,\r\n        baseColumns: []\r\n      }\r\n    },\r\n    mounted() {\r\n      window.addEventListener('resize', this.reflow)\r\n      this.update()\r\n    },\r\n    destroyed() {\r\n      window.removeEventListener('resize', this.reflow)\r\n    },\r\n    methods: {\r\n      updateColumnData() {\r\n        this.containerWidth = this.getContainerWidth()\r\n        this.columnCount = this.getColumnCount()\r\n        this.columnWidth = this.getColumnWidth()\r\n      },\r\n      getContainerWidth() {\r\n        return this.$refs.container.clientWidth\r\n      },\r\n      getColumnCount() {\r\n        for (let i = 1; true; i++)\r\n        {\r\n          let w = i * this.columnMinWidth + (i - 1) * this.gutterWidth\r\n          if (w > this.containerWidth)\r\n            return Math.max(i - 1, 1)\r\n        }\r\n      },\r\n      getColumnWidth() {\r\n        return (this.containerWidth - (this.columnCount - 1) * this.gutterWidth) / this.columnCount\r\n      },\r\n      getBaseColumns() {\r\n        let cols = []\r\n        for (let i = 0; i < this.columnCount; i++)\r\n          cols.push({\r\n            x: i * (this.columnWidth + this.gutterWidth),\r\n            h: 0\r\n          })\r\n        return cols\r\n      },\r\n      update() {\r\n        this.$nextTick(this.reflow)\r\n      },\r\n      reflow() {\r\n        this.updateColumnData()\r\n        let cols = this.getBaseColumns()\r\n\r\n        this.$emit('reflow', {\r\n          containerWidth: this.containerWidth,\r\n          columnCount: this.columnCount,\r\n          columnWidth: this.columnWidth,\r\n        })\r\n\r\n        this.$children.forEach((child, i) => {\r\n          child.$el.style.width = this.columnWidth + 'px'\r\n\r\n          let n = 0\r\n          if (i < this.columnCount)\r\n            n = i\r\n          else\r\n          {\r\n            let minH = -1\r\n            cols.forEach((col, j) => {\r\n              if ((minH == -1) || (col.h < minH))\r\n              {\r\n                n = j\r\n                minH = col.h\r\n              }\r\n            })\r\n          }\r\n\r\n          child.$el.style.transform = 'translate(' + cols[n].x + 'px, ' + cols[n].h + 'px)'\r\n          cols[n].h += child.$el.offsetHeight + this.gutterHeight\r\n        })\r\n\r\n        let containerHeight = 0\r\n        cols.forEach(col => containerHeight = Math.max(containerHeight, col.h))\r\n        this.$el.style.height = containerHeight + 'px'\r\n      },\r\n      imagesLoaded() {\r\n        this.$emit('images-loaded')\r\n\r\n        if (this.monitorImagesLoaded)\r\n          this.reflow()\r\n      }\r\n    },\r\n    directives: {\r\n      imagesLoaded\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .vsg-container {\r\n    display: block;\r\n    position: relative;\r\n    width: 100%;\r\n  }\r\n</style>\r\n"]}]}