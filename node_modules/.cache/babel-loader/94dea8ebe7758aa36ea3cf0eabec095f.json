{"remainingRequest":"/Users/floorvanwieringen/virtual-museum/node_modules/babel-loader/lib/index.js!/Users/floorvanwieringen/virtual-museum/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/floorvanwieringen/virtual-museum/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/floorvanwieringen/virtual-museum/node_modules/vue-stack-grid/src/Stack.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/vue-stack-grid/src/Stack.vue","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/floorvanwieringen/virtual-museum/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGltYWdlc0xvYWRlZCBmcm9tICd2dWUtaW1hZ2VzLWxvYWRlZCc7CmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgY29sdW1uTWluV2lkdGg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGd1dHRlcldpZHRoOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMAogICAgfSwKICAgIGd1dHRlckhlaWdodDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0sCiAgICBtb25pdG9ySW1hZ2VzTG9hZGVkOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY29udGFpbmVyV2lkdGg6IDAsCiAgICAgIGNvbHVtbkNvdW50OiAwLAogICAgICBjb2x1bW5XaWR0aDogMCwKICAgICAgYmFzZUNvbHVtbnM6IFtdCiAgICB9OwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlZmxvdyk7CiAgICB0aGlzLnVwZGF0ZSgpOwogIH0sCiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQoKSB7CiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZsb3cpOwogIH0sCiAgbWV0aG9kczogewogICAgdXBkYXRlQ29sdW1uRGF0YTogZnVuY3Rpb24gdXBkYXRlQ29sdW1uRGF0YSgpIHsKICAgICAgdGhpcy5jb250YWluZXJXaWR0aCA9IHRoaXMuZ2V0Q29udGFpbmVyV2lkdGgoKTsKICAgICAgdGhpcy5jb2x1bW5Db3VudCA9IHRoaXMuZ2V0Q29sdW1uQ291bnQoKTsKICAgICAgdGhpcy5jb2x1bW5XaWR0aCA9IHRoaXMuZ2V0Q29sdW1uV2lkdGgoKTsKICAgIH0sCiAgICBnZXRDb250YWluZXJXaWR0aDogZnVuY3Rpb24gZ2V0Q29udGFpbmVyV2lkdGgoKSB7CiAgICAgIHJldHVybiB0aGlzLiRyZWZzLmNvbnRhaW5lci5jbGllbnRXaWR0aDsKICAgIH0sCiAgICBnZXRDb2x1bW5Db3VudDogZnVuY3Rpb24gZ2V0Q29sdW1uQ291bnQoKSB7CiAgICAgIGZvciAodmFyIGkgPSAxOyB0cnVlOyBpKyspIHsKICAgICAgICB2YXIgdyA9IGkgKiB0aGlzLmNvbHVtbk1pbldpZHRoICsgKGkgLSAxKSAqIHRoaXMuZ3V0dGVyV2lkdGg7CiAgICAgICAgaWYgKHcgPiB0aGlzLmNvbnRhaW5lcldpZHRoKSByZXR1cm4gTWF0aC5tYXgoaSAtIDEsIDEpOwogICAgICB9CiAgICB9LAogICAgZ2V0Q29sdW1uV2lkdGg6IGZ1bmN0aW9uIGdldENvbHVtbldpZHRoKCkgewogICAgICByZXR1cm4gKHRoaXMuY29udGFpbmVyV2lkdGggLSAodGhpcy5jb2x1bW5Db3VudCAtIDEpICogdGhpcy5ndXR0ZXJXaWR0aCkgLyB0aGlzLmNvbHVtbkNvdW50OwogICAgfSwKICAgIGdldEJhc2VDb2x1bW5zOiBmdW5jdGlvbiBnZXRCYXNlQ29sdW1ucygpIHsKICAgICAgdmFyIGNvbHMgPSBbXTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5Db3VudDsgaSsrKSB7CiAgICAgICAgY29scy5wdXNoKHsKICAgICAgICAgIHg6IGkgKiAodGhpcy5jb2x1bW5XaWR0aCArIHRoaXMuZ3V0dGVyV2lkdGgpLAogICAgICAgICAgaDogMAogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gY29sczsKICAgIH0sCiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHsKICAgICAgdGhpcy4kbmV4dFRpY2sodGhpcy5yZWZsb3cpOwogICAgfSwKICAgIHJlZmxvdzogZnVuY3Rpb24gcmVmbG93KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy51cGRhdGVDb2x1bW5EYXRhKCk7CiAgICAgIHZhciBjb2xzID0gdGhpcy5nZXRCYXNlQ29sdW1ucygpOwogICAgICB0aGlzLiRlbWl0KCdyZWZsb3cnLCB7CiAgICAgICAgY29udGFpbmVyV2lkdGg6IHRoaXMuY29udGFpbmVyV2lkdGgsCiAgICAgICAgY29sdW1uQ291bnQ6IHRoaXMuY29sdW1uQ291bnQsCiAgICAgICAgY29sdW1uV2lkdGg6IHRoaXMuY29sdW1uV2lkdGgKICAgICAgfSk7CiAgICAgIHRoaXMuJGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpKSB7CiAgICAgICAgY2hpbGQuJGVsLnN0eWxlLndpZHRoID0gX3RoaXMuY29sdW1uV2lkdGggKyAncHgnOwogICAgICAgIHZhciBuID0gMDsKICAgICAgICBpZiAoaSA8IF90aGlzLmNvbHVtbkNvdW50KSBuID0gaTtlbHNlIHsKICAgICAgICAgIHZhciBtaW5IID0gLTE7CiAgICAgICAgICBjb2xzLmZvckVhY2goZnVuY3Rpb24gKGNvbCwgaikgewogICAgICAgICAgICBpZiAobWluSCA9PSAtMSB8fCBjb2wuaCA8IG1pbkgpIHsKICAgICAgICAgICAgICBuID0gajsKICAgICAgICAgICAgICBtaW5IID0gY29sLmg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBjaGlsZC4kZWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgY29sc1tuXS54ICsgJ3B4LCAnICsgY29sc1tuXS5oICsgJ3B4KSc7CiAgICAgICAgY29sc1tuXS5oICs9IGNoaWxkLiRlbC5vZmZzZXRIZWlnaHQgKyBfdGhpcy5ndXR0ZXJIZWlnaHQ7CiAgICAgIH0pOwogICAgICB2YXIgY29udGFpbmVySGVpZ2h0ID0gMDsKICAgICAgY29scy5mb3JFYWNoKGZ1bmN0aW9uIChjb2wpIHsKICAgICAgICByZXR1cm4gY29udGFpbmVySGVpZ2h0ID0gTWF0aC5tYXgoY29udGFpbmVySGVpZ2h0LCBjb2wuaCk7CiAgICAgIH0pOwogICAgICB0aGlzLiRlbC5zdHlsZS5oZWlnaHQgPSBjb250YWluZXJIZWlnaHQgKyAncHgnOwogICAgfSwKICAgIGltYWdlc0xvYWRlZDogZnVuY3Rpb24gaW1hZ2VzTG9hZGVkKCkgewogICAgICB0aGlzLiRlbWl0KCdpbWFnZXMtbG9hZGVkJyk7CiAgICAgIGlmICh0aGlzLm1vbml0b3JJbWFnZXNMb2FkZWQpIHRoaXMucmVmbG93KCk7CiAgICB9CiAgfSwKICBkaXJlY3RpdmVzOiB7CiAgICBpbWFnZXNMb2FkZWQ6IGltYWdlc0xvYWRlZAogIH0KfTs="},{"version":3,"sources":["Stack.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"vsg-container\" ref=\"container\" v-images-loaded:on.progress=\"imagesLoaded\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import imagesLoaded from 'vue-images-loaded'\r\n\r\n  export default {\r\n    props: {\r\n      columnMinWidth: {\r\n        type: Number,\r\n        required: true\r\n      },\r\n      gutterWidth: {\r\n        type: Number,\r\n        default: 0\r\n      },\r\n      gutterHeight: {\r\n        type: Number,\r\n        default: 0\r\n      },\r\n      monitorImagesLoaded: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        containerWidth: 0,\r\n        columnCount: 0,\r\n        columnWidth: 0,\r\n        baseColumns: []\r\n      }\r\n    },\r\n    mounted() {\r\n      window.addEventListener('resize', this.reflow)\r\n      this.update()\r\n    },\r\n    destroyed() {\r\n      window.removeEventListener('resize', this.reflow)\r\n    },\r\n    methods: {\r\n      updateColumnData() {\r\n        this.containerWidth = this.getContainerWidth()\r\n        this.columnCount = this.getColumnCount()\r\n        this.columnWidth = this.getColumnWidth()\r\n      },\r\n      getContainerWidth() {\r\n        return this.$refs.container.clientWidth\r\n      },\r\n      getColumnCount() {\r\n        for (let i = 1; true; i++)\r\n        {\r\n          let w = i * this.columnMinWidth + (i - 1) * this.gutterWidth\r\n          if (w > this.containerWidth)\r\n            return Math.max(i - 1, 1)\r\n        }\r\n      },\r\n      getColumnWidth() {\r\n        return (this.containerWidth - (this.columnCount - 1) * this.gutterWidth) / this.columnCount\r\n      },\r\n      getBaseColumns() {\r\n        let cols = []\r\n        for (let i = 0; i < this.columnCount; i++)\r\n          cols.push({\r\n            x: i * (this.columnWidth + this.gutterWidth),\r\n            h: 0\r\n          })\r\n        return cols\r\n      },\r\n      update() {\r\n        this.$nextTick(this.reflow)\r\n      },\r\n      reflow() {\r\n        this.updateColumnData()\r\n        let cols = this.getBaseColumns()\r\n\r\n        this.$emit('reflow', {\r\n          containerWidth: this.containerWidth,\r\n          columnCount: this.columnCount,\r\n          columnWidth: this.columnWidth,\r\n        })\r\n\r\n        this.$children.forEach((child, i) => {\r\n          child.$el.style.width = this.columnWidth + 'px'\r\n\r\n          let n = 0\r\n          if (i < this.columnCount)\r\n            n = i\r\n          else\r\n          {\r\n            let minH = -1\r\n            cols.forEach((col, j) => {\r\n              if ((minH == -1) || (col.h < minH))\r\n              {\r\n                n = j\r\n                minH = col.h\r\n              }\r\n            })\r\n          }\r\n\r\n          child.$el.style.transform = 'translate(' + cols[n].x + 'px, ' + cols[n].h + 'px)'\r\n          cols[n].h += child.$el.offsetHeight + this.gutterHeight\r\n        })\r\n\r\n        let containerHeight = 0\r\n        cols.forEach(col => containerHeight = Math.max(containerHeight, col.h))\r\n        this.$el.style.height = containerHeight + 'px'\r\n      },\r\n      imagesLoaded() {\r\n        this.$emit('images-loaded')\r\n\r\n        if (this.monitorImagesLoaded)\r\n          this.reflow()\r\n      }\r\n    },\r\n    directives: {\r\n      imagesLoaded\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .vsg-container {\r\n    display: block;\r\n    position: relative;\r\n    width: 100%;\r\n  }\r\n</style>\r\n"],"sourceRoot":"node_modules/vue-stack-grid/src"}]}